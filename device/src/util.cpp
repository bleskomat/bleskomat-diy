/*
	Copyright (C) 2020 Samotari (Charles Hill, Carlos Garcia Ortiz)

	This program is free software: you can redistribute it and/or modify
	it under the terms of the GNU General Public License as published by
	the Free Software Foundation, either version 3 of the License, or
	(at your option) any later version.

	This program is distributed in the hope that it will be useful,
	but WITHOUT ANY WARRANTY; without even the implied warranty of
	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	GNU General Public License for more details.

	You should have received a copy of the GNU General Public License
	along with this program.  If not, see <https://www.gnu.org/licenses/>.
*/

#include "util.h"

namespace {

	std::string to_string(const double &number) {
		std::ostringstream ss;
		ss << number;
		return ss.str();
	}

	std::string generate_nonce() {
		std::ostringstream ss;
		// Random numbers generated by esp_random are probably sufficient.
		// But just to be safe let's append the current time in microseconds as well.
		const auto ms = std::chrono::high_resolution_clock::now().time_since_epoch().count() / 1000;
		ss << esp_random() << "_" << ms;
		return ss.str();
	}
}

namespace util {

	std::string createSignedWithdrawRequest(const double &accumulatedValue) {
		LnurlSigner signer(config::getConfig());
		const std::string nonce = generate_nonce();
		LnurlWithdrawParamsFiat params;
		params.minWithdrawable = accumulatedValue;
		params.maxWithdrawable = accumulatedValue;
		params.defaultDescription = "Bleskomat ATM purchase (" + to_string(accumulatedValue) + " " + config::getConfig().fiatCurrency + ")";
		const std::string signedUrl = signer.create_url(params, nonce);
		const std::string encoded = Lnurl::encode(signedUrl);
		return encoded;
	}

	std::string toUpperCase(std::string s) {
		std::transform(s.begin(), s.end(), s.begin(), [](unsigned char c){ return std::toupper(c); });
		return s;
	}
}
